// @ts-check
// Module stichting-crow/headers
// Generate the headers material based on the provided configuration.
// CONFIGURATION
//  - specStatus: the short code for the specification's maturity level or type (required)
//  - shortName: the small name that is used after /TR/ in published reports (required) !!check
//  - editors: an array of people editing the document (at least one is required). People
//      are defined using:
//          - name: the person's name (required)
//          - url: URI for the person's home page
//          - company: the person's company
//          - companyURL: the URI for the person's company
//          - mailto: the person's email
//          - note: a note on the person (e.g. former editor)
//  - authors: an array of people who are contributing authors of the document.
//  - formerEditors: an array of people that had earlier edited the document but no longer edit.
//  - subtitle: a subtitle for the specification
//  - publishDate: the date to use for the publication, default to document.lastModified, and
//      failing that to now. The format is YYYY-MM-DD or a Date object.
//  - previousPublishDate: the date on which the previous version was published.
//  - previousMaturity: the specStatus of the previous version
//  - errata: the URI of the errata document, if any
//  - alternateFormats: a list of alternate formats for the document, each of which being
//      defined by:
//          - uri: the URI to the alternate
//          - label: a label for the alternate
//          - lang: optional language
//          - type: optional MIME type
//  - logos: a list of logos to use instead of the W3C logo, each of which being defined by:
//          - src: the URI to the logo (target of <img src=>)
//          - alt: alternate text for the image (<img alt=>), defaults to "Logo" or "Logo 1", "Logo 2", ...
//            if src is not specified, this is the text of the "logo"
//          - height: optional height of the logo (<img height=>)
//          - width: optional width of the logo (<img width=>)
//          - url: the URI to the organization represented by the logo (target of <a href=>)
//          - id: optional id for the logo, permits custom CSS (wraps logo in <span id=>)
//          - each logo element must specify either src or alt
//  - testSuiteURI: the URI to the test suite, if any !!del
//  - implementationReportURI: the URI to the implementation report, if any !!del
//  - noRecTrack: set to true if this document is not intended to be on the Recommendation track !!del
//  - edDraftURI: the URI of the Editor's Draft for this document, if any. Required if
//      specStatus is set to "ED".
//  - additionalCopyrightHolders: a copyright owner in addition to W3C (or the only one if specStatus
//      is unofficial)
//  - overrideCopyright: provides markup to completely override the copyright
//  - copyrightStart: the year from which the copyright starts running
//  - prevED: the URI of the previous Editor's Draft if it has moved !!check
//  - prevRecShortname: the short name of the previous Recommendation, if the name has changed !!check
//  - prevRecURI: the URI of the previous Recommendation if not directly generated from
//    prevRecShortname. !!check
//  - wg: the name of the WG in charge of the document. This may be an array in which case wgURI
//      and wgPatentURI need to be arrays as well, of the same length and in the same order !!del
//  - wgURI: the URI to the group's page, or an array of such !!del
//  - wgPatentURI: the URI to the group's patent information page, or an array of such. NOTE: this
//      is VERY IMPORTANT information to provide and get right, do not just paste this without checking
//      that you're doing it right !!del
//  - wgPublicList: the name of the mailing list where discussion takes place. Note that this cannot
//      be an array as it is assumed that there is a single list to discuss the document, even if it
//      is handled by multiple groups !!del
//  - charterDisclosureURI: used for IGs (when publishing IG-NOTEs) to provide a link to the IPR commitment
//      defined in their charter. !!del
//  - addPatentNote: used to add patent-related information to the SotD, for instance if there's an open
//      PAG on the document. !!del
//  - thisVersion: the URI to the dated current version of the specification. ONLY ever use this for CG/BG
//      documents, for all others it is autogenerated. !!check
//  - latestVersion: the URI to the latest (undated) version of the specification. ONLY ever use this for CG/BG
//      documents, for all others it is autogenerated. !!check
//  - prevVersion: the URI to the previous (dated) version of the specification. ONLY ever use this for CG/BG
//      documents, for all others it is autogenerated. !!check
//  - subjectPrefix: the string that is expected to be used as a subject prefix when posting to the mailing
//      list of the group.!!del
//  - otherLinks: an array of other links that you might want in the header (e.g., link github, twitter, etc).
//         Example of usage: [{key: "foo", href:"https://b"}, {key: "bar", href:"https://"}].
//         Allowed values are:
//          - key: the key for the <dt> (e.g., "Bug Tracker"). Required.
//          - value: The value that will appear in the <dd> (e.g., "GitHub"). Optional.
//          - href: a URL for the value (e.g., "https://foo.com/issues"). Optional.
//          - class: a string representing CSS classes. Optional.
//  - license: can be one of the following
//      - "cc-by", which is experimentally available in some groups (but likely to be phased out).
//          Note that this is a dual licensing regime.
//      - "cc0", an extremely permissive license. It is only recommended if you are working on a document that is
//          intended to be pushed to the WHATWG.
//      - "w3c-software", a permissive and attributions license (but GPL-compatible).
//      - "w3c-software-doc", (default) the W3C Software and Document License
//            https://www.w3.org/Consortium/Legal/2015/copyright-software-and-document
import { ISODate, concatDate, htmlJoinAnd } from "../core/utils.js";
import headersTmpl from "./templates/headers.js";
import { html } from "../core/import-maps.js";
import { pub } from "../core/pubsubhub.js";
// import sotdTmpl from "./templates/sotd.js";

export const name = "stichting-crow/headers";

const W3CDate = new Intl.DateTimeFormat(["nl-NL"], {
  timeZone: "CET",
  year: "numeric",
  month: "long",
  day: "2-digit",
});

const status2maturity = {
  LS: "WD",
  LD: "WD",
  FPWD: "WD",
  LC: "WD",
  FPLC: "WD",
  "FPWD-NOTE": "NOTE",
  "WD-NOTE": "WD",
  "LC-NOTE": "LC",
  "IG-NOTE": "NOTE",
  "WG-NOTE": "NOTE",
};

const status2rdf = {
  "API": "crow:APISpecificatie",
  "DOC": "crow:Document",
  "HR": "crow:Handreiking",
  "IM": "crow:Informatiemodel",
  "RL": "crow:Richtlijn",
};
const status2text = {
  "CROW-BASIS": "document", // depr, geen status -> specType CROW-DOC
  "CROW-NOTITIE": "notitie", // depr, geen status
  "": "",
  "DEF": "vastgesteld",
  "TVL": "tervisielegging",
  "WD": "werkdocument",
};
const status2long = {
  ...status2text,
  "DEF": "Vastgesteld op",
  "TVL": "Tervisielegging van",
  "WD": "Werkdocument van",
};

const specType2text = {
  "API": "API-specificatie",
  "DOC": "document",
  "HR": "handreiking",
  "IM": "informatiemodel",
  "RL": "richtlijn",
};
const noTrackStatus = [
  "BLANCO",
  "WD",
];
const status2versionControlled = [
  "DEF", "TVL"
];
const specType2sotdRequired = [
  "IM", "API",
];
const licenses = {
  cc0: {
    name: "Creative Commons 0 â€“ Publiek domein ",
    short: "CC0",
    url: "https://creativecommons.org/publicdomain/zero/1.0/",
  },
  "cc-by": {
    name: "Creative Commons Naamsvermelding 4.0 Internationaal",
    short: "CC-BY",
    url: "https://creativecommons.org/licenses/by/4.0/legalcode",
  },
  "cc-by-nd": {
    name: "Creative Commons Naamsvermelding-GeenAfgeleideWerken 4.0 Internationaal",
    short: "CC-BY-ND",
    url: "https://creativecommons.org/licenses/by-nd/4.0/legalcode",
  },
};

const baseLogo = Object.freeze({
  id: "",
  alt: "",
  href: "",
  src: "",
  height: "48",
  width: "72",
});

/**
 * @param {*} conf
 * @param {string} prop
 * @param {string | number | Date} fallbackDate
 */
function validateDateAndRecover(conf, prop, fallbackDate = new Date()) {
  const date = conf[prop] ? new Date(conf[prop]) : new Date(fallbackDate);
  // if date is valid
  if (Number.isFinite(date.valueOf())) {
    const formattedDate = ISODate.format(date);
    return new Date(formattedDate);
  }
  const msg =
    `[\`${prop}\`](https://github.com/w3c/respec/wiki/${prop}) ` +
    `is not a valid date: "${conf[prop]}". Expected format 'YYYY-MM-DD'.`;
  pub("error", msg);
  return new Date(ISODate.format(new Date()));
}

export function run(conf) {
  conf.licenseInfo = licenses[conf.license];

  if (!conf.specType) {
    pub("error", "Missing required configuration: `specType`");
  }
  if (!conf.shortName) {
    pub("error", "Missing required configuration: `shortName`");
  }
  if (!conf.pubDomain) {
    pub("error",
      "Missing required configuration: `pubDomain`."
      + " Stel in op naam van de repo.");
  }

  if (!conf.subtitle) {
    conf.subtitle = "";
  }

  conf.publishDate = validateDateAndRecover(
    conf,
    "publishDate",
    document.lastModified
  );

  conf.publishYear = conf.publishDate.getUTCFullYear();
  conf.publishHumanDate = W3CDate.format(conf.publishDate);
  conf.isVersionControlled = status2versionControlled.includes(conf.specStatus.toUpperCase());

  if (conf.isVersionControlled && !conf.thisVersion) {
    // Indien niet handmatig ingesteld, dan automatisch bepaald...

    conf.thisVersion = `https://stichting-crow.github.io/${conf.pubDomain}/${conf.shortName}-${conf.specType}-${conf.specStatus}-${concatDate(conf.publishDate)}/`;
  }

  conf.edDraftURI = `https://stichting-crow.github.io/${conf.pubDomain}/${conf.shortName}/`;

  if (conf.isVersionControlled && !conf.prevVersion) {
    // Indien niet handmatig ingesteld, dan automatisch bepaald...

    if (!conf.previousStatus || !conf.previousPublishDate) {
      pub("error",
        "Bij `specStatus` = `" + conf.specStatus + "` moet Ã³f `prevVersion` ingevuld zijn, "
        + " Ã³f `previousPublishDate` en `previousStatus.");
    }

    conf.previousPublishDate = validateDateAndRecover(
      conf,
      "previousPublishDate"
    );

    conf.prevVersion = `https://stichting-crow.github.io/${conf.pubDomain}/${conf.shortName}-${conf.specType}-${conf.previousStatus}-${concatDate(conf.previousPublishDate)}.html`;
  }

  /* Editors */
  const peopCheck = function (it) {
    if (!it.name) pub("error", "All authors and editors must have a name.");
    if (it.orcid) {
      try {
        it.orcid = normalizeOrcid(it.orcid);
      } catch (e) {
        pub("error", `"${it.orcid}" is not an ORCID. ${e.message}`);
        // A failed orcid link could link to something outside of orcid,
        // which would be misleading.
        delete it.orcid;
      }
    }
  };
  if (!conf.formerEditors) conf.formerEditors = [];
  if (conf.editors) {
    conf.editors.forEach(peopCheck);
    // Move any editors with retiredDate to formerEditors.
    for (let i = 0; i < conf.editors.length; i++) {
      const editor = conf.editors[i];
      if ("retiredDate" in editor) {
        conf.formerEditors.push(editor);
        conf.editors.splice(i--, 1);
      }
    }
  }
  if (!conf.editors || conf.editors.length === 0)
    pub("error", "At least one editor is required");
  if (conf.formerEditors.length) {
    conf.formerEditors.forEach(peopCheck);
  }
  if (conf.authors) {
    conf.authors.forEach(peopCheck);
  }
  conf.multipleEditors = conf.editors && conf.editors.length > 1;
  conf.multipleFormerEditors = conf.formerEditors.length > 1;
  conf.multipleAuthors = conf.authors && conf.authors.length > 1;
  (conf.alternateFormats || []).forEach(it => {
    if (!it.uri || !it.label) {
      pub("error", "All alternate formats must have a uri and a label.");
    }
  });

  /* Copyright */
  if (conf.copyrightStart && conf.copyrightStart == conf.publishYear) {
    conf.copyrightStart = "";
  }

  /* specStatus & specType */
  conf.textStatus = status2text[conf.specStatus.toUpperCase()];
  conf.longStatus = status2long[conf.specStatus.toUpperCase()];

  conf.specTypeText = specType2text[conf.specType.toUpperCase()];

  if (status2rdf[conf.specType.toUpperCase()]) {
    conf.rdfStatus = status2rdf[conf.specType.toUpperCase()];
  }

  conf.showThisVersion = status2versionControlled.includes(conf.specStatus.toUpperCase());
  conf.showPreviousVersion = status2versionControlled.includes(conf.specStatus.toUpperCase());

  conf.dashDate = ISODate.format(conf.publishDate);
  conf.publishISODate = conf.publishDate.toISOString();
  conf.shortISODate = ISODate.format(conf.publishDate);
  // configuration done - yay!

  const options = {
    get multipleAlternates() {
      return conf.alternateFormats && conf.alternateFormats.length > 1;
    },
    get alternatesHTML() {
      return (
        conf.alternateFormats &&
        htmlJoinAnd(conf.alternateFormats, alt => {
          const lang = alt.hasOwnProperty("lang") && alt.lang ? alt.lang : null;
          const type = alt.hasOwnProperty("type") && alt.type ? alt.type : null;
          return html`<a
            rel="alternate"
            href="${alt.uri}"
            hreflang="${lang}"
            type="${type}"
            >${alt.label}</a
          >`;
        })
      );
    },
  };

  // insert into document
  const header = headersTmpl(conf, options);
  document.body.prepend(header);
  document.body.classList.add("h-entry");

  // handle SotD
  const sotd =
    document.getElementById("sotd") || document.createElement("section");
  if (specType2sotdRequired.includes(conf.specType.toUpperCase()) && !sotd.id) {
    pub(
      "error",
      "A custom SotD paragraph is required for your type of document."
    );
  }
  sotd.id = sotd.id || "sotd";
  sotd.classList.add("introductory");

  const revisionTypes = ["addition", "correction"];
  if (
    conf.specStatus === "REC" &&
    conf.revisionTypes &&
    conf.revisionTypes.length > 0
  ) {
    const unknownRevisionType = conf.revisionTypes.find(
      x => !revisionTypes.includes(x)
    );
    if (unknownRevisionType) {
      pub(
        "error",
        `\`specStatus\` is "REC" with unknown revision type '${unknownRevisionType}'`
      );
    }
    if (conf.revisionTypes.includes("addition") && !conf.updateableRec) {
      pub(
        "error",
        `\`specStatus\` is "REC" with proposed additions but the Rec is not marked as a allowing new features.`
      );
    }
  }

  if (
    conf.specStatus === "REC" &&
    conf.updateableRec &&
    conf.revisionTypes &&
    conf.revisionTypes.length > 0 &&
    !conf.revisedRecEnd
  ) {
    pub(
      "error",
      `\`specStatus\` is "REC" with proposed corrections or additions but no \`revisedRecEnd\` is specified.`
    );
  }
  conf.revisedRecEnd = validateDateAndRecover(conf, "revisedRecEnd");
  conf.humanRevisedRecEnd = W3CDate.format(conf.revisedRecEnd);

  // Requested by https://github.com/w3c/respec/issues/504
  // Makes a record of a few auto-generated things.
  pub("amend-user-config", {
    publishISODate: conf.publishISODate,
    generatedSubtitle: `${conf.longStatus} ${conf.publishHumanDate}`,
  });
}

/**
 * @param {string} orcid Either an ORCID URL or just the 16-digit ID which comes after the /
 * @return {string} the full ORCID URL. Throws an error if the ID is invalid.
 */
function normalizeOrcid(orcid) {
  const orcidUrl = new URL(orcid, "https://orcid.org/");
  if (orcidUrl.origin !== "https://orcid.org") {
    throw new Error(
      `The origin should be "https://orcid.org", not "${orcidUrl.origin}".`
    );
  }

  // trailing slash would mess up checksum
  const orcidId = orcidUrl.pathname.slice(1).replace(/\/$/, "");
  if (!/^\d{4}-\d{4}-\d{4}-\d{3}(\d|X)$/.test(orcidId)) {
    throw new Error(
      `ORCIDs have the format "1234-1234-1234-1234", not "${orcidId}"`
    );
  }

  // calculate checksum as per https://support.orcid.org/hc/en-us/articles/360006897674-Structure-of-the-ORCID-Identifier
  const lastDigit = orcidId[orcidId.length - 1];
  const remainder = orcidId
    .split("")
    .slice(0, -1)
    .filter(c => /\d/.test(c))
    .map(Number)
    .reduce((acc, c) => (acc + c) * 2, 0);
  const lastDigitInt = (12 - (remainder % 11)) % 11;
  const lastDigitShould = lastDigitInt === 10 ? "X" : String(lastDigitInt);
  if (lastDigit !== lastDigitShould) {
    throw new Error(`"${orcidId}" has an invalid checksum.`);
  }

  return orcidUrl.href;
}
